/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.yageek.tulipindicators;
/**
 * A wrapper class around JNI calling tulip
 */
public class Bindings {

  static { System.loadLibrary("tulipjni"); }

  private native void loadIndicators();
  private Bindings() { loadIndicators(); }
  private static Bindings INSTANCE = new Bindings();

  /**
   * Call the underlying C function that triggers all the library
   * @param name The indicator name
   * @param inputs The inputs values
   * @param options Tje options values
   */
  public native Response callIndicator(String name, double[] inputs,
                                       double[] options);

  public native IndicatorInfo getIndicatorInfo(String name);

  static final Bindings shared() { return INSTANCE; }

  public enum IndicatorKind {
    OVERLAY(0),     // TI_TYPE_OVERLAY
    MATH(1),        // TI_TYPE_MATH
    SIMPLE(2),      // TI_TYPE_SIMPLE
    COMPARATIVE(3); // TI_TYPE_COMPARATIVE

    private final int kindValue;
    private IndicatorKind(int value) { this.kindValue = value; }
  }

  public static class IndicatorInfo {
    public final String name;
    public final String fullName;

    public final String[] inputs;
    public final String[] options;
    public final String[] outputs;
    public final IndicatorKind kind;

    IndicatorInfo(String name, String fullName, String[] inputs,
                  String[] options, String[] outputs, IndicatorKind kind) {
      this.name = name;
      this.fullName = fullName;
      this.inputs = inputs;
      this.options = options;
      this.outputs = outputs;
      this.kind = kind;
    }
  }

  /**
   * The response of a bindinds computation
   */
  public static class Response {
    /** The computed values */
    final double[] values;
    /**
     * The offset relative to the provided inputs array where the value should
     * start
     */
    final int beginIndex;

    Response(int beginIndex, double[] values) {
      this.values = values;
      this.beginIndex = beginIndex;
    }
  }
}
